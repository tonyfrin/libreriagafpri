import { ChangeEvent } from 'react';
import { SingleValue } from 'react-select';
import type { SelectDefault } from '../../../helpers';
import type { UseCurrenciesReturn, UseErrorReturn } from '../../../states';
export type UseGafpriAttributesSitesReturn = {
    states: {
        name: string;
        nameValid: boolean;
        documentIndex: string;
        documentIndexValid: boolean;
        documentIndexDefault: SelectDefault;
        documentIndexOptions: SelectDefault[];
        documentNumber: string;
        documentNumberValid: boolean;
        address1: string;
        address1Valid: boolean;
        address2: string;
        address2Valid: boolean;
        city: string;
        cityValid: boolean;
        cityDefault: SelectDefault;
        cityOptions: SelectDefault[];
        state: string;
        stateCountryValid: boolean;
        stateCountryDefault: SelectDefault;
        stateCountryOptions: SelectDefault[];
        country: string;
        countryValid: boolean;
        countryDefault: SelectDefault;
        countryOptions: SelectDefault[];
        postCode: string;
        postCodeValid: boolean;
        email: string;
        emailValid: boolean;
        phone: string;
        phoneValid: boolean;
        currenciesId: number;
        currenciesIdValid: boolean;
        currenciesIdDefault: SelectDefault;
        currenciesIdOptions: SelectDefault[];
        currencyLocation: string;
        currencyLocationValid: boolean;
        currencyLocationDefault: SelectDefault;
        currencyLocationOptions: SelectDefault[];
        thousandsSeparator: string;
        decimalSeparator: string;
        separatorValid: boolean;
        separatorDefault: SelectDefault;
        separatorOptions: SelectDefault[];
        decimalNumbers: number;
        decimalNumbersValid: boolean;
        decimalNumbersDefault: SelectDefault;
        decimalNumbersOptions: SelectDefault[];
        taxes: boolean;
        taxesValid: boolean;
        taxesDefault: SelectDefault;
        taxesOptions: SelectDefault[];
        host: string;
        hostValid: boolean;
        error: string[];
        siteId: number;
        type: string;
        typeValid: boolean;
        typeDefault: SelectDefault;
        typeOptions: SelectDefault[];
        latitude: string;
        longitude: string;
        image: string;
        galleryImage: string[];
        submitting: boolean;
    };
    actions: {
        infoReset: () => void;
        changeName: (name: string) => void;
        changeDocumentIndex: (options: SingleValue<{
            value: string;
            label: string;
        }>) => void;
        changeDocumentNumber: (documentNumber: string) => void;
        changeAddress1: (address1: string) => void;
        changeAddress2: (address2: string) => void;
        changeCity: (options: SingleValue<{
            value: string;
            label: string;
        }>) => void;
        changeCityOptions: () => void;
        changeStateCountry: (options: SingleValue<{
            value: string;
            label: string;
        }>) => void;
        setStateCountryDefault: (options: SelectDefault) => void;
        setStateCountry: (value: string) => void;
        changeStateCountryOptions: () => void;
        changeCountry: (options: SingleValue<{
            value: string;
            label: string;
        }>) => void;
        setCountryDefault: (options: SelectDefault) => void;
        setCountry: (value: string) => void;
        changePostCode: (postCode: string) => void;
        changeEmail: (email: string) => void;
        changePhone: (phone: string) => void;
        changeCurrenciesId: (options: SingleValue<{
            value: string;
            label: string;
        }>) => void;
        changeCurrencyLocation: (options: SingleValue<{
            value: string;
            label: string;
        }>) => void;
        changeSeparator: (options: SingleValue<{
            value: string;
            label: string;
        }>) => void;
        changeDecimalNumbers: (options: SingleValue<{
            value: string;
            label: string;
        }>) => void;
        changeTaxes: (options: SingleValue<{
            value: string;
            label: string;
        }>) => void;
        changeHost: (host: string) => void;
        changeType: (options: SingleValue<{
            value: string;
            label: string;
        }>) => void;
        changeImage: (e: ChangeEvent<HTMLInputElement>) => Promise<void>;
        changeGalleryImage: (e: ChangeEvent<HTMLInputElement>) => Promise<void>;
        removeGalleryImage: (image: string) => void;
        validationButtonNext: () => void;
        validationName: (value: string) => boolean;
        validationDocumentIndex: (value: string) => boolean;
        validationDocumentNumber: (value: string) => boolean;
        validationAddress1: (value: string) => boolean;
        validationAddress2: (value: string) => boolean;
        validationCity: (value: string) => boolean;
        validationStateCountry: (value: string) => boolean;
        validationCountry: (value: string) => boolean;
        validationPostCode: (value: string) => boolean;
        validationEmail: (value: string) => boolean;
        validationPhone: (value: string) => boolean;
        validationCurrenciesId: (value: string) => boolean;
        validationCurrencyLocation: (value: string) => boolean;
        validationSeparator: (value: string) => boolean;
        validationDecimalNumbers: (value: string) => boolean;
        validationTaxes: (value: string) => boolean;
        validationHost: (value: string) => boolean;
        validationType: (value: string) => boolean;
        validationImage: (value: string) => boolean;
        validationGalleryImage: (value: string[]) => boolean;
        setSiteId: (value: number) => void;
        setLatitude: (value: string) => void;
        setLongitude: (value: string) => void;
        setSubmitting: (value: boolean) => void;
    };
};
export type UseGafpriAttributesSitesProps = {
    useCurrencies: UseCurrenciesReturn;
    useError: UseErrorReturn;
};
export declare const useGafpriAttributesSites: ({ useCurrencies, useError, }: UseGafpriAttributesSitesProps) => UseGafpriAttributesSitesReturn;
