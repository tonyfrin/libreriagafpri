import { ChangeEvent } from 'react';
import { SingleValue } from 'react-select';
import { GeneralAttribute } from '../../../Validations';
import { SelectDefault } from '../../../helpers';
import { UseCategoryReturn, Category, UseErrorReturn } from '../../../states';
type State = {
    category: number | null;
    categoryValid: boolean;
    tags: string[];
    tagsValid: boolean;
    selectedTagsValue: string;
    sku: string;
    skuValid: boolean;
    description: string;
    descriptionValid: boolean;
    name: string;
    nameValid: boolean;
    publicName: string;
    publicNameValid: boolean;
    photo: string;
    photoValid: boolean;
    submitting: boolean;
    galleryImage: string[];
    galleryImageValid: boolean;
    note: string;
    noteValid: boolean;
    salesPrice: string;
    salesPriceValid: boolean;
    offerPrice: string;
    offerPriceValid: boolean;
    cost: string;
    costValid: boolean;
    type: string;
    typeValid: boolean;
    typeDefault: SelectDefault;
    typeOptions: SelectDefault[];
    taxStatus: string;
    taxStatusValid: boolean;
    taxStatusDefault: SelectDefault;
    taxStatusOptions: SelectDefault[];
    taxClasses: string;
    taxClassesValid: boolean;
    taxClassesDefault: SelectDefault;
    taxClassesOptions: SelectDefault[];
    packageType: string;
    packageTypeValid: boolean;
    packageTypeDefault: SelectDefault;
    packageTypeOptions: SelectDefault[];
    qtyPack: string;
    qtyPackValid: boolean;
    undCbm: string;
    undCbmValid: boolean;
    attributes: GeneralAttribute[];
    attributesValid: boolean;
    valueAttributes: string;
    descriptionAttributes: string;
    status: string;
    statusValid: boolean;
    statusDefault: SelectDefault;
    statusOptions: SelectDefault[];
    permanentLink: string;
    permanentLinkValid: boolean;
    visibility: string;
    visibilityValid: boolean;
    visibilityDefault: SelectDefault;
    visibilityOptions: SelectDefault[];
    weight: string;
    weightValid: boolean;
    height: string;
    heightValid: boolean;
    width: string;
    widthValid: boolean;
    length: string;
    lengthValid: boolean;
    catalogOrder: string;
    catalogOrderValid: boolean;
    reviews: boolean;
    reviewsValid: boolean;
    currentId: number;
    uploadCurrent: boolean;
    categoryOptions: Category[];
};
type Actions = {
    infoReset: () => void;
    validationCategory: (value: number | null) => boolean;
    validationTags: (value: string[]) => boolean;
    validationSku: (value: string) => boolean;
    validationDescription: (value: string) => boolean;
    validationName: (value: string) => boolean;
    validationPublicName: (value: string) => boolean;
    validationPhoto: (value: string) => boolean;
    validationGalleryImage: (value: string[]) => boolean;
    validationNote: (value: string) => boolean;
    validationSalesPrice: (value: number) => boolean;
    validationOfferPrice: (value: number) => boolean;
    validationCost: (value: number) => boolean;
    validationType: (value: string) => boolean;
    validationTaxStatus: (value: string) => boolean;
    validationTaxClasses: (value: string) => boolean;
    validationPackageType: (value: string) => boolean;
    validationQtyPack: (value: number) => boolean;
    validationUndCbm: (value: number) => boolean;
    validationProductAttributes: (value: GeneralAttribute[]) => boolean;
    validationStatus: (value: string) => boolean;
    validationPermanentLink: (value: string) => boolean;
    validationVisibility: (value: string) => boolean;
    validationWeight: (value: number) => boolean;
    validationHeight: (value: number) => boolean;
    validationWidth: (value: number) => boolean;
    validationLength: (value: number) => boolean;
    validationCatalogOrder: (value: number) => boolean;
    validationButtonNext: () => void;
    changeCategory: (value: number | null) => void;
    changeTags: (value: string) => void;
    changeSku: (value: string) => void;
    changeDescription: (value: string) => void;
    changeName: (value: string) => void;
    changePublicName: (value: string) => void;
    changePhoto: (e: ChangeEvent<HTMLInputElement>) => Promise<void>;
    changeGalleryImage: (e: ChangeEvent<HTMLInputElement>) => Promise<void>;
    changeNote: (value: string) => void;
    changeSalesPrice: (value: string) => void;
    changeOfferPrice: (value: string) => void;
    changeCost: (value: string) => void;
    changeType: (value: SingleValue<{
        value: string;
        label: string;
    }>) => void;
    changeTaxStatus: (options: SingleValue<{
        value: string;
        label: string;
    }>) => void;
    changeTaxClasses: (options: SingleValue<{
        value: string;
        label: string;
    }>) => void;
    changePackageType: (options: SingleValue<{
        value: string;
        label: string;
    }>) => void;
    changeQtyPack: (value: string) => void;
    changeUndCbm: (value: string) => void;
    changeAttributes: (value: GeneralAttribute) => void;
    setAttributes: (value: GeneralAttribute[]) => void;
    setValueAttributes: (value: string) => void;
    setDescriptionAttributes: (value: string) => void;
    changeStatus: (value: SingleValue<{
        value: string;
        label: string;
    }>) => void;
    changeLink: (value: string) => void;
    changeVisibility: (value: SingleValue<{
        value: string;
        label: string;
    }>) => void;
    changeWeight: (value: string) => void;
    changeHeight: (value: string) => void;
    changeWidth: (value: string) => void;
    changeLength: (value: string) => void;
    changeCatalogOrder: (value: string) => void;
    changeReviews: () => void;
    setCurrentId: (id: number) => void;
    setPhoto: (value: string) => void;
    setSubmitting: (value: boolean) => void;
    getStatusOptionByValue: (value: string) => SingleValue<{
        label: string;
        value: string;
    }> | undefined;
    getVisibilityOptionByValue: (value: string) => SingleValue<{
        label: string;
        value: string;
    }> | undefined;
    getTypeOptionByValue: (value: string) => SingleValue<{
        label: string;
        value: string;
    }> | undefined;
    removeTag: (tag: string) => void;
    setSelectedTagsValue: (value: string) => void;
    removeGalleryImage: (image: string) => void;
    getPackageTypeOptionByValue: (value: string) => SingleValue<{
        label: string;
        value: string;
    }> | undefined;
    addAttributes: () => void;
    onRemoveAttibutes: (name: string) => void;
    setGalleryImage: (value: string[]) => void;
    setTags: (value: string[]) => void;
    getTaxStatusOptionByValue: (value: string) => SingleValue<{
        label: string;
        value: string;
    }> | undefined;
    getTaxClassesOptionByValue: (value: string) => SingleValue<{
        label: string;
        value: string;
    }> | undefined;
    setReviews: (value: boolean) => void;
    setUploadCurrent: (value: boolean) => void;
};
export type UseGafpriAttributesProductsReturn = {
    states: State;
    actions: Actions;
};
export type UseGafpriAttributesProductsProps = {
    optionsTaxClasses: SelectDefault[];
    useError: UseErrorReturn;
    useCategory: UseCategoryReturn;
};
export declare function useGafpriAttributesProducts({ optionsTaxClasses, useError, useCategory, }: UseGafpriAttributesProductsProps): UseGafpriAttributesProductsReturn;
export {};
